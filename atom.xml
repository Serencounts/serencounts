<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>函数连续是逐点定义的</title>
  
  
  <link href="http://serencounts.github.io/atom.xml" rel="self"/>
  
  <link href="http://serencounts.github.io/"/>
  <updated>2023-04-25T01:39:48.376Z</updated>
  <id>http://serencounts.github.io/</id>
  
  <author>
    <name>Arnold Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划算法</title>
    <link href="http://serencounts.github.io/post/dp.html"/>
    <id>http://serencounts.github.io/post/dp.html</id>
    <published>2023-04-25T00:05:47.000Z</published>
    <updated>2023-04-25T01:39:48.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>以下定义出自维基百科:</p><blockquote><p>定义1.1 动态规划（英语：Dynamic programming，简称 DP），是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。</p></blockquote><p>简单说，就是求解当前问题，是基于子问题的延申。先将子问题求解，并保存答案，然后通过子问题的函数优化为当前问题的解。</p><p>动态规划的通过保存子问题的结果，减少了重复计算。</p><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p>动态规划典型结构: </p><ul><li>最优子结构</li><li>状态转移方程</li><li>边界</li><li>重叠子问题</li></ul><blockquote><p><strong>核心思想</strong> 是拆分为子问题，并记住子问题的答案，减少重复的计算。</p></blockquote><p>如下的<mark class="hl-label default">例1.1</mark> ，可以看出动态规划与递归问题的相似性。事实也确实如此，但二者还是有本质区别的。</p><p>动态规划问题从最小的问题开始，从小到大，向上求解；递归则是从顶到底求解。</p><p>此外，动态规划将过往的子问题存储，从而避免了重复计算。</p><h2 id="问题举例"><a href="#问题举例" class="headerlink" title="问题举例"></a>问题举例</h2><h3 id="例-1-1-青蛙跳阶"><a href="#例-1-1-青蛙跳阶" class="headerlink" title="例 1.1 青蛙跳阶"></a>例 1.1 青蛙跳阶</h3><p>青蛙上台阶，每次可以跳1次，也可以跳两次台阶，求问跳到十阶台阶有多少种跳法？</p><p>不难看出，这题利用递归求解较为简单，$f(10)=f(8)+f(9)$ .</p><p>为了避免重复计算，我们将 $f(n)  \qquad n=1,2,\dots,n-1$ 的结果存储下来。</p><p>显然，$f(1)=1\ f(2)=2$ 于是，我们从 $n=3$ 开始逐步计算到 $n=10$，并用一个数组存储该问题的答案。</p><p>而计算的核心公式与递归求解是相同的，即：</p><p>\begin{equation*}<br>    f(n)=f(n-1)+f(n-2)<br>\end{equation*}</p><p>代码实现：</p><pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">public class Solution &#123;    public int numWays(int n) &#123;        if (n &#x3D;&#x3D; 0 || n &#x3D;&#x3D; 1) &#123;            return 1;        &#125;        int[] dp &#x3D; new int[n + 1];        dp[1] &#x3D; 1;        dp[2] &#x3D; 2;        for (int i &#x3D; 3; i &lt;&#x3D; n; i++) &#123;            dp[i] &#x3D; (dp[i - 2] + dp[i - 1]) % 1000_000_007;        &#125;        return dp[n];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>求解动态规划问题，需要列出状态转移方程，也可以理解为拆解为子问题的方程</p></blockquote><h3 id="例1-2-最长递增子序列"><a href="#例1-2-最长递增子序列" class="headerlink" title="例1.2 最长递增子序列"></a>例1.2 最长递增子序列</h3><p>通过以下步骤，将这道问题利用动态规划问题求解。</p><ul><li><strong>初始定义</strong>：设$dp[i]$是包含$num[i]$的最长序列。</li><li><strong>状态转移</strong>：$dp[i] = max(dp[i],dp[j]+1)$ 满足 $num[i]&gt;num[j]$</li><li><strong>初始状态</strong>：$dp[i]=1$</li></ul><p>C++实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/365698607">动态规划详解-知乎</a></li><li><a href="https://leetcode.cn/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">最长子序列-leetcode</a></li></ul>]]></content>
    
    
    <summary type="html">简单谈一谈我对动态规划算法的了解，并通过C++实现</summary>
    
    
    
    <category term="数学专业课" scheme="http://serencounts.github.io/categories/%E6%95%B0%E5%AD%A6%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="T.B.C" scheme="http://serencounts.github.io/tags/T-B-C/"/>
    
    <category term="算法" scheme="http://serencounts.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="http://serencounts.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Mathjax对数学公式的渲染</title>
    <link href="http://serencounts.github.io/post/test0-md.html"/>
    <id>http://serencounts.github.io/post/test0-md.html</id>
    <published>2023-04-24T14:21:21.000Z</published>
    <updated>2023-04-24T16:23:42.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本篇来自于博主个人试错多次的经验总结，不一定正确！渲染使用Mathjax</p></blockquote><p>在利用Mathjax或者Katex对数学公式进行渲染的时候，不少朋友和我一样遇到了诸如 \\\\ 不能正常换行多行公式的问题。</p><p>例如:</p><pre class="line-numbers language-Markdown" data-language="Markdown"><code class="language-Markdown">$$(a+b)+c&#x3D;a+(b+c)\\&#x3D;(a+c)+b\\&#x3D;b+(a+c)$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果:</p><script type="math/tex; mode=display">(a+b)+c=a+(b+c)\\=(a+c)+b\\=b+(a+c)</script><p>理想显示效果是:</p><p>\begin{array}<br>    \ a+b+c=a+(b+c)\\<br>    =(a+c)+b\\<br>    =b+(a+c)<br>\end{array}</p><p>作为一个新手小白针对这个问题，利用搜索引擎进行检索并照着各位博主的解决方法进行操作。运气好的时候一遍就成功，否则测试多少次都是bug。这里博主针对自己在求解过程中碰到的阻碍列出具体的解决方法。</p><blockquote><p>第一，也是最重要的一点，需要确认自己已安装的渲染器插件有哪些。</p></blockquote><p>不同的渲染器并存会产生冲突或错误。例如同时安装<br><mark class="hl-label default">hexo-renderer-markdown-it-plus</mark>  和<mark class="hl-label default">hexo-renderer-kramed</mark>  就会导致数学公式渲染出现如下错误:</p><p><img src="/medias/bug.png" alt="数学公式紊乱"></p><blockquote><p>解决方法，查看并卸载会起冲突的渲染器</p></blockquote><pre class="line-numbers language-终端" data-language="终端"><code class="language-终端">npm listnpm uninstall hexo-renderer-markdown-it-plusnpm fund<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong> 这里博主更推荐留下并使用kramed插件，因为后续有方法解决多行公式换行的问题。</p><p>至于配置<mark class="hl-label default">hexo-renderer-kramed</mark> 的教程有很多并且大同小异，建议谷歌搜索。</p><p>这里主要想解决 \\\\ 在 $LaTeX$ 中的换行问题。</p><blockquote><p>其次，可以通过下面这篇文章对<mark class="hl-label default">inline.js</mark> 进行修改</p></blockquote><p><a href="https://blog.csdn.net/weixin_44441126/article/details/119745642#2%20hexo-renderer-kramed%E6%B8%B2%E6%9F%93MathJax%E6%97%B6%E4%B8%8EMarkdown%E8%AF%AD%E6%B3%95%E5%86%B2%E7%AA%81">解决hexo-renderer-kramed渲染冲突的部分问题 | CSDN社区</a></p><p>执行了上面的操作后可以发现，你的Hexo博客已经支持 $LaTeX$ 公式了并可以使用 ‘\\\\’ 进行换行！</p><p>例如:</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">aligned</span><span class="token punctuation">&#125;</span><span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> = <span class="token function selector">\sigma</span>(y-x) <span class="token function selector">\\</span><span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> = <span class="token function selector">\rho</span> x - y - xz <span class="token function selector">\\</span><span class="token function selector">\dot</span><span class="token punctuation">&#123;</span>z<span class="token punctuation">&#125;</span> <span class="token punctuation">&amp;</span> = -<span class="token function selector">\beta</span> z + xy<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">aligned</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果如下:</p><p>\begin{aligned}<br>\dot{x} &amp; = \sigma(y-x) \\<br>\dot{y} &amp; = \rho x - y - xz \\<br>\dot{z} &amp; = -\beta z + xy<br>\end{aligned}</p><p><strong>注意</strong> 修改的文件是kramed的配置文件，在markdown中需要打出双反斜线任然需要type four times，因为其中两个紧邻反斜线会被转义。</p><p>此外，还有一点仍然无法解决，那就是markdown语法的行间公式的换行问题，即：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$$(a+b)+c=a+(b+c)\\=(a+c)+b\\=b+(a+c)$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在markdown语法中可以正常换行，但是由于一些原因(此处不详述，大概可能是markdown在渲染为html网页时出现的冲突)，在网页中无法成功换行。解决方法也十分简单，那就是：</p><blockquote><p>行间公式使用 $LaTeX$ 语法环境！</p></blockquote><p><strong>小注</strong> ： 博主对mathjax对markdown语法行间公式渲染‘\\\\’不能成功换行的问题之前在Mkdocs中也遇到过，貌似是Mathjax遗留的远古问题了。</p><p>分享一份<a href="https://www.osgeo.cn/mathjax/web/start.html">Mathjax使用文档</a>，希望能对这个数学工具有一定的了解。</p>]]></content>
    
    
    <summary type="html">利用Mathjax对博客公式进行渲染，存在着的一些问题以及解决方法</summary>
    
    
    
    <category term="博客配置" scheme="http://serencounts.github.io/categories/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="http://serencounts.github.io/tags/Hexo/"/>
    
    <category term="BUTTERFLY" scheme="http://serencounts.github.io/tags/BUTTERFLY/"/>
    
  </entry>
  
  <entry>
    <title>怕什么真理无穷,进一寸有一寸的欢喜！</title>
    <link href="http://serencounts.github.io/post/diary2.html"/>
    <id>http://serencounts.github.io/post/diary2.html</id>
    <published>2023-04-23T10:09:10.109Z</published>
    <updated>2023-04-24T08:45:09.170Z</updated>
    
    <content type="html"><![CDATA[<p>对未来做出一点简单的规划:</p><ul><li>首要的目标是学习好专业课程，争取取得更高的GPA</li><li>其次，制定基本线路:Plan A争取保研；Plan B寻求出国读博机会；Plan C考研</li><li>制定严谨，切合时宜的作息，学习时间安排，不随意挥霍有限的，弥足珍贵的时间</li><li>每天下午六点左右开始写博客日记，六点半左右发表。若有其他事情耽误则放弃上传博客时间</li></ul><blockquote><p>怕什么真理无穷，进一寸有一寸的欢喜！</p></blockquote><p>千言万语汇成一句话: 继续前进！</p>]]></content>
    
    
    <summary type="html">决心摆脱浑浑噩噩的生活状态，迎接新的一天</summary>
    
    
    
    <category term="日记" scheme="http://serencounts.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="随笔" scheme="http://serencounts.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="目标" scheme="http://serencounts.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
    <category term="基本线路" scheme="http://serencounts.github.io/tags/%E5%9F%BA%E6%9C%AC%E7%BA%BF%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>衾凤冷，枕鸳孤，愁肠待酒舒</title>
    <link href="http://serencounts.github.io/post/diary1.html"/>
    <id>http://serencounts.github.io/post/diary1.html</id>
    <published>2023-04-22T14:53:59.659Z</published>
    <updated>2023-04-24T08:45:13.451Z</updated>
    
    <content type="html"><![CDATA[<p>现在是23年四月二十二日晚上十一点左右,我坐在宿舍楼层中庭的自习区，刷着手机短视频，心里有股说不出的滋味，便麻醉在一个个风格迥异的短视频之中。<br>难以想象这两天我究竟过的有多浑浑噩噩，只记得昨日早晨九点我走进逸夫楼教室，今日颓然地从图书馆出来。可是，看到段子笑不出来，看到刀子哭不出来。</p><p>不过今日的确是完成了一件事情的，我把“长江七号”这部电影又看了一遍。如前所述，我可能并没有太多的情感波动。看到七仔和小迪面对恶犬狼狈的逃窜，小迪用手托举着答辩，小迪在厕所被七仔的无数“米田共机枪”扫射等名场面我竟没有被逗笑。</p><p>相反，小时候只当做喜剧看，并不懂星爷这部电影究竟经典在哪里。如今再回味，只能说感同身受。从星爷所饰演的民工身上看到了父亲，母亲，舅舅等至亲的影子。</p><p>亲戚们都在劝导我，要好好读书，将来升官发财.而我也是这么畅想着未来的生活，那时候读书还没有压力，偏偏展现的好像有那么一点天分。努力升学到市一中，又侥幸录取至中大。但只有自己知道，我的人生不知从何时开始，学习上经常碰壁。</p><p>读高中时还没有意识到的事情，是一直以来，虚荣心占据着思想高地，学习思维与方式还没有适应过来。以至于，成绩一直不高，我总是埋怨努力没有回报，学习如此艰难。</p><hr>]]></content>
    
    
    <summary type="html">期中周，经过数天的摆烂，对自己的学习和生活方式的一点点反思</summary>
    
    
    
    <category term="日记" scheme="http://serencounts.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="T.B.C" scheme="http://serencounts.github.io/tags/T-B-C/"/>
    
    <category term="随笔" scheme="http://serencounts.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="闲聊" scheme="http://serencounts.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
    <category term="人生感悟" scheme="http://serencounts.github.io/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>数学分析0.1章</title>
    <link href="http://serencounts.github.io/post/firstpost.html"/>
    <id>http://serencounts.github.io/post/firstpost.html</id>
    <published>2023-04-22T00:56:00.789Z</published>
    <updated>2023-04-24T14:20:14.714Z</updated>
    
    <content type="html"><![CDATA[<p>序言:<br>众所周知,数学分析是数学系的基础学科,在刚入学时,数学分析的学习过程不可谓不困难。本专栏旨在总结数学分析中的知识点以及笔者对数学分析的一点点理解,具体的证明亦可以参照书本。</p><p>推荐的国内教材: </p><ul><li><a href="https://book.douban.com/subject/33459350/">《数学分析》陈纪修著</a>             以下简称zzs</li><li><a href="https://book.douban.com/subject/1130381/">《数学分析新讲》张筑生著</a>              以下简称cjx</li></ul><h1 id="实数系"><a href="#实数系" class="headerlink" title="实数系"></a>实数系</h1><p>实数系简单地记作 $R$ , 本节主要重难点在于实数连续统的概念。</p><h2 id="实数"><a href="#实数" class="headerlink" title="实数"></a>实数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>定义出自zzs</strong></p><blockquote><p><strong>定义1.1</strong> 在所有的无尽小数中，把彼此等同的无尽小数视为同一个数,这样就得到了实数。</p></blockquote><p>在国内的大部分教材中，实数集合的概念来自于对有理数集合的扩充(有理数系对加减乘除运算封闭)。我们将有理数集合简单地记作:</p><script type="math/tex; mode=display">Q=  ( \ \frac{p}{q} \ | \  p,q是任意互素的整数 \ )$$。显然(证明略), $\sqrt{2}$无法以有理数集合中的元素表示。因此对开方运算封闭需要对有理数系系进行扩充。(对运算封闭的概念参见cjx)。### 规范表示任意实数有且仅有一种无穷小数的表现形式,可规范表现为:</script><p> ± a_0.a_1a_2\cdots a_n \cdots</p><script type="math/tex; mode=display">其中 $a_i$ 是 $0,1,\cdots 9$ 中任一数。</script><p>\forall r \in R, \\\\<br>r= ± a_0.a_1a_2\cdots a_n \cdots</p><script type="math/tex; mode=display">### 顺序比较称</script><p>a_0.a_1a_2\cdots a_n \cdots=r_1 ＞ r_2=b_0.b_1b_2\cdots b_n \cdots</p><script type="math/tex; mode=display">若存在整数 $p$ :</script><p>a_0\cdots a_{p-1} = b_0 \cdots b_{p-1} \quad but \  \  a_p&gt;b_p</p><script type="math/tex; mode=display">有了实数的规范表示与比较规则,我们可以进一步对实数系进行讨论.### 三岐性以下三种情况在实数系中必有一种情况发生:* a > b* a = b* a < b此外，这样的比较还有传递的性质:</script><p>若a&gt;b,b&gt;c<br>则a&gt;c</p><script type="math/tex; mode=display">### 稠密性<pre class="line-numbers language-定理" data-language="定理"><code class="language-定理">设 a，b是实数，且a&lt;b。在a与b中间可以找到一个有尽小数。满足 a &lt; b &lt; c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>上述定理称为有理数的稠密性,注意a,b的无尽小数表示方法。证明的简单思路:</script><p>存在 p \in Z, s.t.a_p&lt;b_p;<br>所以可以令 c_p =a_p +1;c_{p+1} \cdots =0</p><p>$$</p><p>事实上，对于实数系中任意两个实数，都能找到另一个实数介于这两个实数之间，这样的性质称为实数的稠密性。</p><p>考虑有理数和无理数的稠密性，不难发现有理数与无理数也是分别具有稠密性质的。</p><h3 id="连续性"><a href="#连续性" class="headerlink" title="连续性"></a>连续性</h3><p>在论述实数连续性的性质前，我们需要对实数集合的一些性质加以论述。</p><p>首先，讨论上下界的概念。</p><pre class="line-numbers language-定义" data-language="定义"><code class="language-定义">设集合 E 是实数集合的子集且不为空集，如果存在实数 L，大于(小于)集合 E 中的任意元素 就称 L 是 E 的一个上(下)界。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>称一个集合是有界的，如果它既有上界又有下界。</p><p>有了上(下)界的概念之后，上下确界的定义也比较自然了。</p><p>首先，上确界是上界集合(即由集合E的上界组成的集合)中最小的元素，即最小上界。同理可以定义下确界的概念。</p><p>接下来就是有关实数集合连续性的论述,将留在下一章讲述。</p>]]></content>
    
    
    <summary type="html">重读数学分析，并总结数学分析中的知识点以及笔者对数学分析的一点点理解</summary>
    
    
    
    <category term="数学专业课" scheme="http://serencounts.github.io/categories/%E6%95%B0%E5%AD%A6%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="学习笔记" scheme="http://serencounts.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数学分析" scheme="http://serencounts.github.io/tags/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>R环境安装</title>
    <link href="http://serencounts.github.io/post/Rthirdpost.html"/>
    <id>http://serencounts.github.io/post/Rthirdpost.html</id>
    <published>2023-04-22T00:56:00.786Z</published>
    <updated>2023-04-24T12:48:38.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="R安装"><a href="#R安装" class="headerlink" title="R安装"></a>R安装</h2><p>Windows下借助一些包管理工具(例如winget，scoop等)可以方便地安装R语言编译解释环境。或者通过官网下载R以及编辑器Rstudio：</p><p><a href="https://www.r-project.org/">R语言官网</a></p><h2 id="RStudio-初始设置"><a href="#RStudio-初始设置" class="headerlink" title="RStudio 初始设置"></a>RStudio 初始设置</h2><p>显示当前工作目录通过调用函数：</p><pre class="line-numbers language-Console" data-language="Console"><code class="language-Console">&gt;getwd()[1] &quot;C:&#x2F;Users&#x2F;genius&#x2F;Documents&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置默认工作目录(需要每次打开时键入):</p><pre class="line-numbers language-Console" data-language="Console"><code class="language-Console">&gt;setwd(dir &#x3D; &quot;工作目录&quot;)&gt;getwd()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者也可以在图形窗口按照命令修改即可。<a href="https://zhuanlan.zhihu.com/p/146355865">Rstudio修改工作目录</a></p><p>列出当前工作目录下的所有文件:</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">&gt;list.files()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">&gt;dir()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><p>类似其他编程语言,使用加减乘除对常量进行方便地运算。</p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><pre class="line-numbers language-console" data-language="console"><code class="language-console">&gt;x &lt;- 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者两个 ‘&lt;’ 符号表示对全局变量强制赋值:</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">&gt;x &lt;&lt;- 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>可以方便地调用函数对变量进行操作。</p>]]></content>
    
    
    <summary type="html">R语言环境，编辑器的安装与调试，入门级操作</summary>
    
    
    
    <category term="编程语言" scheme="http://serencounts.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R语言" scheme="http://serencounts.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="http://serencounts.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="环境搭建" scheme="http://serencounts.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>R命令入门</title>
    <link href="http://serencounts.github.io/post/R2.html"/>
    <id>http://serencounts.github.io/post/R2.html</id>
    <published>2023-04-20T15:45:52.857Z</published>
    <updated>2023-04-24T12:48:24.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="R包"><a href="#R包" class="headerlink" title="R包"></a>R包</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>在线安装</li><li>源码安装</li></ul><p><a href="https://cran.r-project.org/web/packages/">官网</a><br><pre class="line-numbers language-console" data-language="console"><code class="language-console">&gt;install.package(&quot;name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3>]]></content>
    
    
    <summary type="html">R语言的基础使用命令，安装以及使用R包(T.B.C)</summary>
    
    
    
    <category term="编程语言" scheme="http://serencounts.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R语言" scheme="http://serencounts.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="http://serencounts.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="T.B.C" scheme="http://serencounts.github.io/tags/T-B-C/"/>
    
  </entry>
  
  <entry>
    <title>群论</title>
    <link href="http://serencounts.github.io/post/secondpost.html"/>
    <id>http://serencounts.github.io/post/secondpost.html</id>
    <published>2023-04-17T12:55:37.406Z</published>
    <updated>2023-04-24T12:49:00.732Z</updated>
    
    <content type="html"><![CDATA[<p>序言: 抽象代数(又称近世代数),是SYSU数学学院大二下开设的一门课程。<br>笔者正在进行抽象代数的学习,借助博客分享自己的学习笔记和心得还有题目。</p><p>推荐(当前正在用)的学习资料: </p><ul><li><a href="https://www.zhihu.com/column/c_1269028152392896512?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=1474635592411181056">知乎抽象代数专栏</a><br><strong>不甚着重于证明部分,适合快速对定义以及定理进行了解或复习</strong></li><li><a href="https://www.bilibili.com/video/BV1Cz4y1Q7Mu/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=45458df81148cc4d699b0b2af9681501">哔哩哔哩抽象代数课程</a><br><strong>注意,该课程较为基础,希望读者自行斟酌!</strong></li><li><a href="https://www.zhihu.com/question/310507084/answer/2900128742?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=1474635592411181056&amp;utm_psn=1622250919738691584&amp;utm_source=wechat_session">知乎:书籍推荐</a><br><strong>笔者所用的书籍是科大版近世代数</strong></li></ul><pre class="line-numbers language-引用" data-language="引用"><code class="language-引用">合成法则是群论中最基础的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">抽象代数学习经验与笔记分享(T.B.C)</summary>
    
    
    
    <category term="数学专业课" scheme="http://serencounts.github.io/categories/%E6%95%B0%E5%AD%A6%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="学习笔记" scheme="http://serencounts.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="T.B.C" scheme="http://serencounts.github.io/tags/T-B-C/"/>
    
    <category term="抽象代数" scheme="http://serencounts.github.io/tags/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>世界,你好!</title>
    <link href="http://serencounts.github.io/post/hello-world.html"/>
    <id>http://serencounts.github.io/post/hello-world.html</id>
    <published>2023-04-16T11:35:05.453Z</published>
    <updated>2023-04-24T15:25:22.011Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎光临我的博客空间,这是作为编辑的第零篇文章！从我的博客空间后续将上传一些代码以及学习笔记,欢迎指正!<br>测试数学公式的渲染效果：</p><script type="math/tex; mode=display">a^2+b^2=c^2</script><p>数学公式的渲染效果一般.</p><pre class="line-numbers language-math" data-language="math"><code class="language-math">x&#x3D;\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</script><p>检测渲染效果。</p><pre class="line-numbers language-Latex" data-language="Latex"><code class="language-Latex">ln \&#123; \prod_&#123;i&#x3D;1&#125;^&#123;n&#125; f(x_i;\theta)  &#x3D; \sum_&#123;i&#x3D;1&#125;^&#123;n&#125; \binom&#123;n&#125;&#123;k&#125; \prod_&#123;i&#x3D;1&#125;^&#123;k&#125; \frac&#123;1&#125;&#123;\sqrt&#123;2\pi&#125;&#125; \exp^&#123;-\frac&#123;x^2&#125;&#123;2&#125;&#125;p^k\prod_&#123;j&#x3D;1&#125;^&#123;n-k&#125; \frac&#123;1&#125;&#123;\pi (1+x_j^2)&#125;(1-p)^&#123;n-k&#125;\&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="math/tex; mode=display"> ln \{ \prod_{i=1}^{n} f(x_i;\theta)  = \\ \sum_{i=1}^{n} \binom{n}{k} \prod_{i=1}^{k} \frac{1}{\sqrt{2\pi}} \exp^{-\frac{x^2}{2}}p^k\prod_{j=1}^{n-k} \frac{1}{\pi (1+x_j^2)}(1-p)^{n-k}\}</script><p>多行公式语法测试:</p><pre class="line-numbers language-YMl" data-language="YMl"><code class="language-YMl">&#123;% math %&#125;\begin&#123;aligned&#125;\dot&#123;x&#125; &amp; &#x3D; \sigma(y-x) \\\dot&#123;y&#125; &amp; &#x3D; \rho x - y - xz \\\dot&#123;z&#125; &amp; &#x3D; -\beta z + xy\end&#123;aligned&#125;&#123;% endmath %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\begin{aligned}<br>\dot{x} &amp; = \sigma(y-x) \\<br>\dot{y} &amp; = \rho x - y - xz \\<br>\dot{z} &amp; = -\beta z + xy<br>\end{aligned}</p><script type="math/tex; mode=display">amsmath = code \newlines.jpg</script><p>测试一下:</p><p>\begin{bmatrix}<br>    1 &amp; x_0 &amp; x_0^2 &amp; \cdots &amp; x_0^n \\<br>    1 &amp; x_1 &amp; x_1^2 &amp; \cdots &amp; x_1^n \\<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    1 &amp; x_n &amp; x_n^2 &amp; \cdots &amp; x_n^n<br>\end{bmatrix}<br>*<br>\begin{bmatrix}<br>    a_0 \\ a_1 \\ \vdots \\ a_n<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    y_0 \\ y_1 \\ \vdots \\ y_n<br>\end{bmatrix}</p><p>\begin{array}{c}<br>F_{M}(z)=F_{X_{1}}(z) F_{X_{2}}(z) \cdots F_{X_{n}}(z) \\<br>F_{N}(z)=1-\left[1-F_{X_{1}}(z)\right]\left[1-F_{X_{2}}(z)\right] \cdots\left[1-F_{X_{n}}(z)\right]<br>\end{array}</p><p>$F_Y(y)=P\{ Y\le y \}=P\{ g(x)\le Y\}=P\{ X \in A \},A=\{ x \in X\mid g(x)\le Y \}$</p>]]></content>
    
    
    <summary type="html">我的博客空间会分享一些生活经历和学习经验，欢迎访问并提出建设性建议</summary>
    
    
    
    <category term="博主笔谈" scheme="http://serencounts.github.io/categories/%E5%8D%9A%E4%B8%BB%E7%AC%94%E8%B0%88/"/>
    
    
    <category term="随笔" scheme="http://serencounts.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Hexo" scheme="http://serencounts.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
